
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'jaffle_shop'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

#on-run-start:
#  - "alter warehouse transforming set warehouse_size=small;"

on-run-end:
  - "{% for schema in schemas %} grant usage on schema {{ schema }} to reporter; {% endfor %}"
  #- "{% if target.name == 'prod' %}{{ dbt_artifacts.upload_results(results) }}{% endif %}"
vars:
  materialization_type: 'view'
  start_date: '1999-01-01'
  # which model or models should be built?
  # values can be all, sales, upsales, etc.
  # you can assign a value at runtime, as in
  # dbt run --vars '{"key": "value"}'
  # you can also assign a value in a model, as in
  #
  # {% set last_audit_id = get_last_audit_id() %}
  # select * from {{ ref('some_table') }}
  izzi_model_selector: 'all'
  #dbt_artifacts:
  #  dbt_artifacts_schema: dbt_artifacts_grose
  #  dbt_artifacts_table: artifacts_grose

    

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  jaffle_shop:
    # Applies to all files under models/example/
    example:
      materialized: view
    #pre-hook: 
    #  - "{{ dbt_snow_mask.create_masking_policy('models') }}"
    #post-hook: 
    #  - "{{ dbt_snow_mask.apply_masking_policy('models') }}"      
  dbt_artifacts:
    +schema: artifacts # optional, default is your target schema
    staging:
      +schema: artifacts # optional, default is your target schema
    sources:
      +schema: artifacts # optional, default is your target schema      

query-comment:
  comment: '{{ dbt_snowflake_query_tags.get_query_comment(node) }}'
  append: true # Snowflake removes prefixed comments.
